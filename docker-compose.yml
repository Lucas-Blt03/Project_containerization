services:
  backend-auth:
    build: ./backend-auth
    container_name: backend-auth
    env_file:
      - ./backend-auth/.env
    depends_on:
      db-auth:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - event-network

  db-auth:
    image: postgres:15
    container_name: db-auth
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authdb
    volumes:
      - db-auth-data:/var/lib/postgresql/data
      - ./databases/auth_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - event-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user" ]
      interval: 5s
      retries: 5
      timeout: 3s

  backend-events:
    build: ./backend-events
    container_name: backend-events
    env_file:
      - ./backend-events/.env
    depends_on:
      mongodb-events:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - event-network

  mongodb-events:
    image: mongo:latest
    container_name: mongodb-events
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: events_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_events_data:/data/db
    networks:
      - event-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 5s
      retries: 5
      timeout: 3s

volumes:
  db-auth-data:
  mongo_events_data:

networks:
  event-network:
    driver: bridge
